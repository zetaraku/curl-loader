Last updated: 18/05/2007


Nearest release 0.31 may hopefully include: 

1. Multi-post forms, suggested by Jeremy Hicks jehicks@novell.com
    http://curl.haxx.se/libcurl/c/curl_formadd.html

2. HTTP GET filled forms for login credentials (they are sent using url).

3. Testing of HTTP PUT support, e.g. file upload. See put.conf

4. Add a url-based tag STOP_ON_ERROR to schedule or not to
    schedule a client for more cycles, when an error condition detected.
   Now we have  such option as a global one, whereas URLs may have 
   different level of importance.

5. ERROR_RESPONSE_CODES - add a list or codes considered
   as errors, or not considered as error conditions on a per-url bases. 
   By default all HTTP 5xx codes and 4xx -401-407 are considered as errors.
   Plus means add to a url errors list, where minus means remove from a
   url error list.
   Something like ERROR_RESPONSE_CODES="+100+101-500-503"

6. Cookies - add an option to add a per-url cookie. Currently, we just enable any
     cookies set by a server. Probably, users may wish to use a very specific
    and known in advance cookie.

7. Add an option to limit throughput per client. Libcurl is already supporting it.

---------------------------------------------------------------------------------------------------- 

Next releases:

0. Performance improvements:

- cached memory allocators, using libcurl API 
   (Aleksandar Lazic <al-curlloader@none.at>):
   http://curl.haxx.se/libcurl/c/curl_global_init_mem.html

- adaptation of curl-loader for SMP/multi- core HW. We can share 
   the clients (and their ip-addresses) among several threads. The
   first thread will read from others statistics counters, combine them
   and output it to screen and files (the first thread makes join).
   Michael Moser has proposed to use the memory allocator like here:
   http://www.hoard.org/
   http://www.cs.umass.edu/%7Eemery/hoard/asplos2000.pdf

- Testbed for 50K and 100K clients. We need a more powerful HW:
    2-4 CPUs/cores and 4-8 GB of memory

1. Dynamic allocation of the form post buffers. Current static
   allocation uses too much memory reserves.

2. Support more than current 2 tokens (up to 8) in 
    FORM_RECORDS_FILE. Tokenize the input in cycle. 

3. An option to download a url not only once a cycle, but according to its
   "Weight", e.g. several times prior to going to the next url.

4. ERROR_RESPONSE_BODY - a regular expression pattern for a
    search in a response body. If not found - error. Look in Apache
   JMeter.

5. ERROR_HEADER and ERROR_HEADER_VALUE -  whether we get a 
    certain header and whether value matches a regular expression pattern

6. Logging to files headers and bodies of responses exists. We may wish to improve
    it on a certain stage by using memory-mapped files from our custom write
    finctions. 
    Memory-mapped files are effective for logging, but always we know the size in
    advance. Mapping -re-mapping and truncation, if taken too much, may be 
    required.

7. HIDDEN fields are widely used to keep the session. We may wish to support it.

8. HTML analyses. libcurl example is using libtidy in:
   http://www.koders.com/c/fid7923BF828D0534D6B747ED138FCDD50DCFD13B3F.aspx

9. Aleksandar Lazic <al-curlloader@none.at> has suggested to make configurable 
   a number of TCP connections, that our virtual client can use (the default is up to 5), 
   and, if persistant, what is the number of request-responses till the connection to be 
   closed and re-established. 
  Another proposal of Aleks is to make configurable HTTP 1.1 or 1.0, that
  we will not implement unless it becomes a feature required by many users.
  We can add to libcurl a new option - something like 
  CURLOPT_CONNECTION_REUSENUM to pass a <max_number> of requests till 
  connection refresh.
  Note, that httperf (sessions) is a reference application.

10. Configuration/making improvements: moving all source-files
    to src directory etc.

11. X.509 client certificates per each https, ftps url. Client certificate
    for each client?

12. Support for CAPS (calls per second) defined mode. Currently, we are 
   supporting only a certain number of virtual clients and CAPS is the derived
   parameter. CAPS-MODE MAY support a certain number of CAPS, 
   and virtual clients number to be the derived parameter;

13. Load Status GUI. Decrease of loading clients number [-|\] - SIPP-like;

14. Template-guided output of configurable statistics 
   (what user wishes with desired string, names) to statistics file;

15. Usage of random time intervals, e.g 100-200 (from 100 to 200 msec);

16. Support for more protocols: telnet, SFTP, SCP, SSH, etc;

17. Support for more HTTP and FTP features.
