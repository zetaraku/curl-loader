1/11/2006

1. Menu interface to configure testing conf-file. Dialog-like interface
   may be a good option. There are several requests for that, particularly
   from QA/validation people.

2. Good statistics from the smooth mode to be generalized to the 
storming mode as well. We need to provide more statistics, which
not to be limited just to success and error numbers. 

Requested general counters:
- requests success num;
- requests errors num below the application: resolving or TCP layers;
- requests application level errors num, like server errors 5xx;
- redirects num - 3xx;

Requested server delay counters (per url bases):
- server TCP-delay, time between SYN from client and SYN-ACK back from server;
- server application delay, time between request sent and response from server;
Question 1: whether to count SSL handshake time for HTTPS;
Question 2: resolving time;


are redirects numbers, server TCP delay, server SSL-delay (HTTPS only) 
and server application (HTTP) delay per client as well as averages per
batch of clients.

SIPP provides a useful console output with the loading scenario presentation
and updatable "running counters". Worth using this approach to present
load scenario and major statistics counters. Statistics may be also outputted
to an ASCII text file with separators ready for import to Excel. Detailed info
about errors may be presented in browsable html format.

We should support options to make:
- no statistics;
- minimal set of statistics, TBD;
- all statistics;

3. Configuration/making improvements starting from moving all source-files
to src directory etc

Making to perform unified build for all major libraries, like libcurl, libcares.
 
make <option> to support as options:

debug=1, 0, default is 0 - no debugging symbols;
opt=1, 0, default is 1 - build with optimization;
profile=1,0, default is 0 - build without profiling -pg option
resolver=no, global, cares, default is no. If "global" (global DNS cache) enabled,
                prevent usage with -t (threads) option.

4. Support for resolving options: global DNS cache and cares library. 

5. Future releases will hopefully incorporate libcurl HYPER API, using 
curl_multi_socket() approach and epoll support by libevent as in
http://curl.haxx.se/lxr/source/hiper/hipev.c Thus, 50000, 100000 clients
from a single process can become a reality.

