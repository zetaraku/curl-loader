version ?

* Initial release of our hyper mode.

* Improved performance of the smooth (default) and hyper
   mode by exluding unnecessary remove and add of a handle
   from/to multihandle in setup_curl_handle () in loader.c.

* Improved preformance of all modes by making patch to libcurl
   (accepted to the library) changing linear traversal of
   curl_multi_remove_handle () to the single-step lookup.

* LOGIN_POST_STR added an option to generate unique users
   with the same password. Thanks to Jeremy Brown 
   <jbrown_at_novell.com> for motivating this feature.

* Improved validation of LOGIN_POST_STR string and moved
   to parse_conf.c. Size of the buffer for the string increased from 64,
   which is not enough to 256. Thanks to Jeremy Brown 
   <jbrown_at_novell.com> for reporting this bug.


version 0.27 svn 227

* Added facility to customize/add/over-write HTTP/FTP headers. 
   Tag CUSTOM_HEADER is serving for this feature. Up to 16 custom 
   HTTP/FTP headers are allowed. 
   If a header already exits by default, the custom header over-writes it. 
   USER_AGENT tag is for User-Agent header only, whereas by 
   CUSTOM_HEADER may be added or over-written any header (including
   User-Agent).
   An example of batch configuration is ./conf-examples/custom_hdrs.conf
	
* Fixed crash in statistics, when login operations defined, but logoff not.
	
* Added an option to load login credentials (user and password) from a file.
   A text file with usernames and passwords with the structure of 
   each string like: <username><separator><password> can be used as an input.
   According to RFC1738, only reserved ':', '@', '/' and probably ' ' (space) are safe 
   to use as separators between username and password.
   Tag LOGIN_CREDENTIALS_FILE specifies the path to the file with
   credentials (full-path or relative to curl-loader). An example of batch 
   configuration is ./conf-examples/credentials_fr_file.conf and an example of
   credentials in ./conf-examples/credentials.cred.
	
* Cleanup of allocations and client array initializations in login.c
	
* IPv6 support added. Batch configuration conf-example/ipv6.conf
   and patch patches/curl-ipv6-bind.patch are added. The patch has been
   integrated to the mainline libcurl, therefore we shall remove it, when moving
   to the next libcurl release.
   Our code now actually supports other scopes for IP, than "global". Do we
   need to make an option to configure scope for IP-address?
   TODO: IPv6 flow label support?
	
* Libevent library added to the making process as a separate
   making target.
	
* Added USER_AGENT tag to the section GENERAL to make HTTP User-Agent 
   header configurable. When no tag or empty tag or empty tag string is 
   specified, curl-loader takes the default User-Agent header of MSIE-6 (sorry,
   FireFox folks).

* Documentation improved, HOWTOS-* files removed with their content
   moved to README. README file re-worked to have a more structured fashion.
   FAST-START file added.

* Web-site added.
	

version 0.26 - svn 151

* Added support for HTTP Authentication and Proxy Authentication.
   The methods supported are Basic, Digest (RFC2617) and NTLM.
   When an HTTP server/proxy responds by 401 or 407, libcurl will choose the 
    most safe method from those, supported by the server/proxy.

* "make menuconfig" opens dialog menu to assist in creation of
   a loading batch configuration file. Building dialog package requires
   ncurses development package.
   Run "make menuconfig" to see, what happens.

* Batch configuration tags since this version can be provided as either quotted 
   or not quotted. Empty string tags to be marked as "", whereas "N/A" string is
   still supported for the backward compartibility.
	
* Unified making. The script build_curl.sh has gone. Now to build both the libcurl 
   and curl-loader with optimization, just run:
   >make cleanall; make optimize=1
   To build both libcurl and curl-loader with optimization and without
   debugging:
   >make cleanall; make optimize=1 debug=0

* CAPS number added to the "standing" Loading Status GUI. It is
   calculated as the number of the first cycled state, entered by clients 
   per second.

* 4xx HTTP client error, which are not 401 or 407 (authentication required),
   are considered now errors.

* Operation statistics added to the "standing" Loading Status GUI, namely,
   number of url successful or failed for LOGIN, for each UAS url and for 
   LOGOFF operations;

* "Standing" Loading Status GUI improved with regards to its layout.



version 0.25, 14/02/2007, svn 121

* "Standing" Loading Status GUI added to present running counters.
    Looks like a very convenient way for looking at loading in-progress.
	
* Added summary statistics of load to be outputted at statistics
   snapshot intervals together with an interval statistics. Very useful
   feature.
	
* Configuration file tag NETMASK now accepts also netmask as IPv4
   quad-dotted string, not only as a CIDR number.
	
* Command line option -i <seconds> added to make intermediate statistics
   snapshoting timer configurable.

* Gradual increase of clients number at startup re-worked to use timer and
    timer-queue.

* Added timer to test periodically the size of logfile in smooth mode. 
   Command-line option -l < logfile maxsize> now brings another semantics and 
   provides size limit for a batch logfile in MB (default 1024 MB). When the
   logfile size limit is reached, the file is rewinded.
   This closes the issue of unlimited logfile in smooth mode.

* Added to the timer-node pointer to timer handling function <func_timer>. 
  Timer-queue will use another newly added function <tq_dispatch_nearest_timer>
  to remove nearest timer node from the timer-queue and call for <func_timer>
  of the node. Further <tq_dispatch_nearest_timer> re-schedules periodic timers,
  and manages memory issues against internal mpool of hnodes.
	
  This makes handling of timers mode rather Object Oriented.



version 0.24, 06/02/2007, svn 106


* Smooth mode now respects the interleave timeouts between urls,
   when the timeouts configured to be some values in milliseconds above
   10 msec. This is achived by keeping clients in the heap-based timer queue.
   When an interleave timeout is specified as 0, next url or next action of
    such clients is scheduled immediately without timer-queue scheduling.

* Added support for gradual increase of clients number at the loading
   start. Use tag CLIENTS_INITIAL_INC in GENERAL section
   to specify the number of loading clients to be added each second till
   the total client number, specified by CLIENTS_NUM tag.

* The interleave timeout numbers will be interpreted now as milliseconds,
   not seconds as before. Take care to update your configuration files.

* Configuration file parser has been re-designed to be based on 
   TAG-tag_parser_func mapping. The big "object-oriented" parsing switch
   has been waived out.

* TODO list updated.

* Advanced to the newest libcurl version 7.16.1 to fix several FTP and 
  multi-handle issues



version 0.23 06/12/2006, svn-79

* The limitation of 1000 clients per batch have been removed. Try 1500, 2000 and
  may be even more, but care about number of sockets available and their 
  recycling.
	
* The behavior of -r option has been reverted.
   The default behavior of curl-loader now is to re-use a tcp-connection for next
   request-response cycles. If you are specifying -r command-line option, the 
   connection will be closed and re-opened for the next request. Whether it is
   appropriate for you to work with -r or without depends on your server support
   of Keep-Alive, and the purpose of your testing. Try with and without -r and 
   see, what do you get. Connection reuse default decreases consumption of 
   opened descriptors (sockets) and ports with sockets in TIME_WAIT states.

* HTTP 4xx client errors are now supported with statistics, logging, etc

version 0.22 28/11/2006, svn-75

* Fixed stack smashing bug after curl_multi_fdset (). Libcurl
  cannot check, whether our descriptor is within valid FD_SETSIZE
  range. Therefore, we are increasing FD_SETSIZE and doing the job.
  Thanks to Evgeniy Polyakov <johnpol@2ka.mipt.ru> for reporting 
  the problem.

* HOWTOS-BIG-LOAD added to address the appropriate setup for large loads.

version 0.21 22/11/2006, svn-62

* Building bug fix and more explanations about building requirements.

* Code commented mostly and function headers added

* CURL handles moved from array in batch to the client context, to which
  it belongs

version 0.20 14/11/2006, svn-48

* Bugs fixed in storming mode, where cycling logoff was broken and some
   interleave timeouts not respected.

* Smooth mode set to be the default loading mode. When libcurl detects an error
   with a client, by default the client continues loading, starting a new cycle from 
   the beginning. When -e command line option is specified, client with 
   libcurl-error will not be scheduled no more for loading.

* Clients table dumped to file $batch_name.ctx. This is done when the loading
    is accomplished either naturally or by SIGINT.

* SIGINT closes loading and dumps final statistics to statistics file.

* Loading statistics outputted to file $batch_name.txt with the last string as
   final statistics string, separated by a string with asterisks.

version 0.19 9/11/2006, svn-40

* Loading statistics for HTTP/HTTPS enhanced for smooth-mode and added
  for storming mode.
  The statistics includes the following counters:
   - requests num;
   - responses success num;
   - 3xx redirects num;
   - server 5xx errors num;
   - other errors num, like resolving, tcp-connect, server closing or 
     empty responses num;
   - average application server delay (msec), estimated as the time between 
     HTTP request and HTTP response without taking into the account network
     latency (RTT);
   - average application server delay for 2xx (success) HTTP-responses, as above,
     but only for 2xx responses. The motivation for that is that 3xx redirections
     and 5xx server errors/rejects may not necessarily provide a true indication
     of a testing server working functionality.

* FTP and FTPs support added. Currently it should go to UAS urls section and use
   for passing user credentials ftp url (RFC 1738), like:
   ftp://username:password@hostname:port/etc-str
   File ftp.conf added to configs directory.

* All url-specific context collected to url_context structure to reside in 
   the new file url.h. Function single_handle_setup () re-worked and HTTP-specific
   part separated to setup_handle_appl 9) function, which is in preparation to 
   support more protocols besides http/s.

* THANKS file added.
* Building directories re-arranged. Directory packages arranged with dialog,
   and c-ares tarballs added. 
	
* Advanced to libcurl 7.16.0.

* Instead of bloody hacking used in loader_smooth.c mperform_smooth () to get
   access to client_context* cctx, finally we are using setting and getting cctx via
   PRIVATE pointer API. The hacking broke compiling against libcurl starting 
   from 7.15.5.
	
* Effective URL will be outputted to logfile, thanks for 
   CURLINFO_EFFECTIVE_URL facility. Usefull to provide real urls
   after redirections, not just the urls client starts with
  

version 0.18, 1/11/2006 svn-21

-Major improvement of configuration. Several command line options removed and
instread the configuration file enhanced. Configuration file separated to several
sections, namely:
- GENERAL;
- LOGIN;
- UAS (user activity simulation, like fetching URLs and sleeping);
- LOGOFF;
Only GENERAL section is a MUST, whereas other sections are enabled whenever
is necessary, depending on the purpose of the testing. 

-Several more options for LOGIN and LOGOFF parts are added.

- Login and logoff of clients may be configured to be done only once or to
be cycled with optional UAS-load in between of login and logoff cycles.

- Smooth-loading mode with statistics is finally back to work after being
broken for a while.

- Options -a, -w and -z removed. Instead of using -a option, one may dublicate
the login url in UAS section.



version 0.17, 10/11/2006

-Added ChangeLog and TODO files.
	
-README - improved to contain information, available before only
 from curl_loader -h

-Authentication using POST has been unfortunately disabled in storming
 mode. Fixed the bug, with thanks to Arik Nahmany, Arik.Nahmany@vocaltec.com,
 for pointing this.

-Some people may be interested to load their servers with multiple logging of
 the same user and with the same password. We have allowed a more
 sophisticated case with user and password incrementing and being unique, but
 no reason not to support this rather simple case. Added support for this,
 where, when POST login string contains two %d, we are incrementing username
 and password, and, if the string lacks any %d symbols, this id the simple
 case. Thanks to Arik Nahmany, Arik.Nahmany@vocaltec.com for suggesting this
 feature and testing it.

-Fixed an old bug of storming mode, where the first url used in
 authentication was also participating in further load. When authentication is
 required, the first url not to be used in load, unless option '-a' is added to to the 
 commandline.

-Added support for cookies, which are set in some cases upon authentication.

-Enabled infinitive number of redirections. 

- Logoff operation enabled as GET-only, GET+POST and POST-only. Initially,
 it was tested for the storming mode. This is managed by the '-w' commandline
 option, whereas '-z' is in charge for tuning login options between GET+POST 
and POST-only.

	
version 0.15
Basic version to be referred to.
            Full path to the file (from curl-loader binary), containing login credentials strings
         formatted as usernameSEPARATORpassword without spaces left. We are supporting 
         separators ':', '@', '/' and ' ' (space), which according to RFC1738 are safe to use between username 
         and password. Only one of the above separators to be used in each file.         
        Note, that when the file with credentials is specified, "Login POST String Matrix" should not contain %d
         symbols and to be something like  "user=%s&password=%s"

containing credentials lines formatted as 
          userSEPpasswrd without spaces left. 	
