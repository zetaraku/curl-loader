FAST START INSTRUCTIONS



Building curl-loader.

Build it using general C development environment with bash, 
gcc (3 or 4 series), make, etc on a linux machine.
        
Building pre-requirements are:
1. openssl binaries;
2. openssl development package with include files (on debian package libssl-dev);
3. ncurses development package to run 'make menuconfig' with dialog GUI.
         
Adjust Makefile variables to point to the openssl headers and libraries. 
If you want to specify an openssl development directory with include 
files (e.g. crypto.h), export environment variable OPENSSLDIR with 
the value of that directory.
For example: $export OPENSSLDIR=the-full-path-to-the-directory
         
Another known issue is libidn.so, which means, that some linux distributions 
do have some libidn.so.11, but not libidn.so. Resolve it by creating a softlink. 
        
Run the following commands from your (hopefully) bash linux shell:
$tar zxfv curl-loader-&lt;version&gt;.tar.gz
$cd curl-loader-&lt;version&gt;
$make
         
By default, we are building both libcurl and curl-loader without optimization and with
debugging -g option. To build with optimization and without debugging, please, run:
$make cleanall
$make optimize=1 debug=0
If still any building issues, please, fill you free to contact us for assistance.

       


Loading Configuration.

To run the load, you need to create your configuration file to be passed to
curl-loader by the -f commmand line option, e.g.
#curl-loader -f ./conf-user/user_batch.conf
        
For more examples, please, look at the files in "conf-examples" directory. You may 
copy an example file and edit it.
        
Another option is to start with running "$make menuconfig" configuration GUI, which 
requires ncurses development package on your system. The dialog window 
will guide you and create your configuration file in conf-user directory. 
The current limitation of the menu-guided configuration, is that it enables 
to create only a single UAS URL.


      

Environment and System.

Running hundreds and thousands of clients, please, do not forget:
 - to increase limit of descriptors (sockets) by running e.g. 
   #ulimit -n 10000;
- optionally, to set reuse of sockets in time-wait state: by setting 
   #echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle and/or 
   #echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse;
       
In some cases you may need to increase the system limits for open
descriptors (sockets).
       
         


Usage: 

run as a root user:
#./curl-loader -f &lt;configuration filename&gt; [other options]
For the details about [other options] - see FAQs in README.
        
If curl-loader reports any problems with validation of your configuration,
"don't panic" - just fix it.


For more details, please, look into the FAQs in README file.
       
