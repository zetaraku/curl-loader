<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Welcome to curl-loader</title> 
  </header> 
  <body> 
    <section id="overview">
      <title>Introduction</title>
<p>curl-loader (also known as "omes-nik" and "davilka") is an open-source 
tool written in C-language, simulating application load and application 
behavior of thousands and tens of thousand HTTP/HTTPS and FTP/FTPS 
clients, each with its own source IP-address. In contrast to other tools 
curl-loader is using real C-written client protocol stacks, namely, HTTP and FTP stacks of 
<a href="http://curl.haxx.se/libcurl/features.html">libcurl</a> and
TLS/SSL of <a href="http://www.openssl.org/support/faq.html">openssl</a>,
and simulates user behavior with support for login and authentication flavors.
      </p>
      <p>
The goal of the project is to deliver a powerful and flexible open-source testing solution
as a real alternative to Spirent Avalanche and IXIA IxLoad.
  </p>
      <p>The tool is useful for performance loading of various application services, 
for testing web and ftp servers and traffic generation. Activities of each virtual client 
are logged and collected statistics includes information about resolving, connection 
establishment, sending of requests, receiving responses, headers and data 
received/sent, errors from network, TLS/SSL and application (HTTP, FTP) level events and errors.
  </p>
      <p> Virtual clients are grouped together to the so-called batches of clients, performing
              the same sort of activities, like:
  </p>
       <p>     - authentication login;  </p>
       <p>     - user activity simulation by fetching several URLs with configurable timeouts in between; </p>
       <p>     - logoff. </p>
      <p> The tool can be easily extended to generate sftp, telnet, tftp, ldap, ssh, scp etc other 
              application protocols, supported by the great libcurl library.
  </p>
    </section>

    <section id="features">
      <title>Features List</title>
      <p>
- Virtual clients number. The tool runs, depending on your HW and scenario,
2500-25000 and more simultaneously loading clients, all from a single curl-loader process.
Actual number of clients may be several times higher (we tried 60 000 HTTP 1.1 clients), 
and it is limited mainly by memory. Each client performs loading from its own source IP-address or, 
as an option, all clients share the same IP-address;
      </p>
      <p>
- Rampup of the virtual clients number at loading start in either automatic or
manual mode;
      </p>
      <p>
- IPv4 and IPv6 addresses and URIs;
      </p>
      <p>
- HTTP 1.1. GET, POST and PUT, including file upload operations;
      </p>
      <p>
- HTTP user authentication login with POST or GET+POST methods. 
Unique configurable username and password for each virtual client as well as 
configurable posted string (post-forms) are the options. Another option is 
loading of users with credentials from a tokens text file;
      </p>
      <p>
- HTTP POST/GET forms with up to 16 tokens filled from a tokens text file;
      </p>
      <p>
- HTTP user logoff with POST, GET+POST, or GET (cookies); POST logoff with
configurable posted string (post-forms);
      </p>
      <p>
- HTTP multipart form data POST-ing as in RFC1867;
      </p>
      <p>
- HTTP Web and Proxy Authentication (HTTP 401 and 407 responses) with 
Basic, Digest (RFC2617) and NTLM supported;    
      </p>
      <p>
- HTTP 3xx redirections with unlimited number of redirections;
      </p>
      <p>
- HTTP cookies and DNS caches;
      </p>
      <p>
- FTP passive and active, FTP upload;
      </p>
      <p>
- Full customization of client request HTTP/FTP headers ;
      </p>
      <p>
- Transfer limit rate for each client download or upload operation on a per url bases;
      </p>
      <p>
- URL fetching probability;
      </p>
      <p>
- TCP connections reuse or re-establishment on a per url bases;
      </p>
      <p>
- Unlimited configurable number of URLs. Mixing of HTTP, HTTPS, FTP 
and FTPS urls in a single batch (test plan) configuration;
      </p>
      <p>
- Connection establishment timers for each URL;
      </p>
      <p>
- URL completion timers monitoring and enforcement for each client;
      </p>
      <p>
- Inter/after URL "sleeping" timers, including random timers taken from a configurable interval;
      </p>
      <p>
- Logfile with tracing activities for each virtual client. The logfile is automatically 
rewinded, when reaching configurable size preventing disk crashes;
      </p>
      <p>
- Logging of responses (headers and bodies) to files.
      </p>
      <p>
- Pre-cooked batch configuration (test plan) examples;
      </p>
      <p>
- Load Status GUI at console and with output to file;
      </p>
      <p>
- Status and statistics for each virtual client, which are logged to file;
      </p>
       <p>Here is a screenshot:</p>
          <img src="images/black_cut.jpeg" alt="curl-loader screenshot" />
    </section>

    <section id="license">
      <title>License</title>
      <p>
             curl-loader is licensed under GPLv2.
      </p>
     </section>

    <section id="authors">
      <title>Authors</title>
      <p>
         The tool is written and supported by Robert Iakobashvili and Michael Moser, both 
         from Israel.
      </p>
     <p>
          <img src="images/israel.jpg" alt="Israel flag" />
      </p>
      <p>
        Please, use the link to the mailing list provided in Support 
         section to contact us and to get support for the tool. Subscribe to the curl-loader-devel
         list and mail your filled PROBLEM-REPORTING form located in the curl-loader tarball
         to the list. Your suggestions, ideas and patches would be very much appreciated.
      </p>
      <p>
         The official language of the curl-loader-devel mailing list is English, whereas 
         Russian and German written mails are also welcomed.
      </p>

     </section>
     <section id="success-usage">
     <title>Successfully Used</title>
       <p>
           To simulate HTTP/S load of thousands of clients against authentication 
   gateway for testing of the gateway performance in various scenarios.

    curl-loader supplied HTTP/S client load against Apache web-server with the 
    gateway in the middle, where the gateway made a browser hijacking and HTTP- 
    redirection of the curl-clients to the HTTPS url at the gateway's own 
    web-server. HTTPS page of the web-server provided a POST form to the user
    with username and password for the client/user authentication against
    an external AAA (RADIUS) server. If the authentication was OK, user (a libcurl
    virtual client object) was allowed to enter the Internet and to perform some
    sort of simulated by curl-loader network activity, namely, fetching urls and 
    sleeping in between them. After enjoying Internet, user was coming to logoff.
      </p>
       <p> 
          To test web-server pages, authenticating tens and hundred thousand of
    clients, where each client comes to a HTTPS url using GET method and is
    redirected by the web-server to another url, providing authentication POST 
    form with username and password. After successful authentication of a client
    the web-server was setting to the client server-cookies. Client activities were 
    further simulated by fetching urls and sleeping in between. Clients were 
    doing logoff using GET-method to the web-server logoff-url, where the cookies
    were used by the web-server to verify client identity.
      </p>
       <p>
    To generate Gbps traffic from thousands of TCP/HTTP clients and to test the 
    impact of thousands of firewalling and NAT iptables/ipset rules and 
    hundreds of the rules being added/deleted each second at performance of a 
    gateway device.

    curl-loader provided client load against Apache web-server fetching a 
    url with a gigabyte file, thus, creating a permanent heavy-load 
    traffic, containing thousands of tcp-streams at the gateway in the middle.  
      </p>
    </section>
  </body>
</document>
