<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>Welcome to curl-loader</title> 
  </header> 
  <body> 
    <section id="overview">
      <title>Introduction</title>
      <p>The loader is a C-written open-source community tool, simulating 
             application load and application behavior of thousands and tens of 
             thousand HTTP/HTTPS and FTP/FTPS clients, each with its own 
             source IP-address. In contrast to other tools, curl-loader is using real 
             client protocol stacks, namely, HTTP and FTP stacks of 
             <a href="http://curl.haxx.se/libcurl/features.html">libcurl</a>,
             TLS/SSL of <a href="http://www.openssl.org/support/faq.html">openssl</a>, 
             and supports login and authentication flavors.
  </p>
      <p>The tool is useful for performance loading of various application services,
              using HTTP, HTTPS, FTP and FTPS, for web-sites testing and traffic generation.
              Activities of each virtual client are logged and statistics provided: resolving, connection
             establishment, sending of requests, receiving responses, headers and data 
             received/sent, errors from network, TLS/SSL and application (HTTP, FTP) levels.
  </p>
      <p> Virtual clients are groupped to so-called batches of clients, performing
              the same sort of activities, like:
  </p>
       <p>     - authentication login;  </p>
       <p>     - user activity simulation (UAS) by fetching several urls and timeouts in between; </p>
       <p>     - logoff. </p>
      <p> The tool can be easily extended to generate sftp, telnet, tftp, ldap, ssh, scp etc other 
              application protocols, supported by the great libcurl library.
  </p>
    </section>

    <section id="features">
      <title>Features List</title>
      <p>
- Virtual clients number. The tools runs depending on your HW and scenario up to 
5000-15000 simultaneously loading clients, all from a single curl-loader process.
Actual number of clients may be several times (if not tens) higher than the number of 
simultaneously loading clients and is limited only by memory. Each client performs 
loading from its own source IP-address or, as an option, all clients share the same 
IP-address;
      </p>
      <p>
- Rampup of the virtual clients number at loading start in either automatic or
manual mode;
      </p>
      <p>
- IPv4 and IPv6 addresses and URIs;
      </p>
      <p>
- HTTP 1.1, HTTPS, FTP, FTPS, TLS/SSL;
      </p>
      <p>
- HTTP user authentication login with POST or POST after GET methods. 
Unique configurable username and password for each virtual client as well as 
configurable posted string (post-forms) are the options. Another option is 
loading of users with credentials from a text file;
      </p>
      <p>
- HTTP user logooff with POST, POST after GET, or GET (cookies); POST logoff with
configurable posted string (post-forms);
      </p>
      <p>
- HTTP Web and Proxy Authentication (HTTP 401 and 407 responses) with 
Basic, Digest (RFC2617) and NTLM supported;    
      </p>
      <p>
- HTTP 3xx redirections with unlimited number of redirections;
      </p>
      <p>
- HTTP cookies and DNS caches;
      </p>
      <p>
- Full customization of client request HTTP/FTP headers for each url;
      </p>
      <p>
- TCP connections reuse or re-establishment is configurable on per url bases;
      </p>
      <p>
- Unlimited configurable number of URLs. Mixing of HTTP, HTTPS, FTP 
and FTPS urls in a single batch of client configuration;
      </p>
      <p>
- Connection establishment timers for each URL;
      </p>
      <p>
- URL completion timers can be set and enforced for each client;
      </p>
      <p>
- Inter/after URL "sleeping" timers;
      </p>
      <p>
- Logfile with tracing activities for each virtual client. The logfile is atomatically 
rewinded, when reaching configurable size preventing disk crashes;
      </p>
      <p>
- Logging of responses (headers and bodies) to files.
      </p>
      <p>
- Dialog GUI guided creation of configuration files and well as pre-cooked 
configuration examples;
      </p>
      <p>
- Load Status GUI and load status output to file;
      </p>
      <p>
- Status and statistics per each virtual client logged to file;
      </p>
      <p>
- Detailed loading statistics at Load Status GUI and to file;
      </p>
       <p>Here is a screenshot:</p>
      <p>
          <img src="images/black_screen.jpg" alt="curl-loader screenshot" />
       </p>
    </section>

    <section id="license">
      <title>License</title>
      <p>
             Actually it is GPL2 due to the code from 
            <a href="http://linux-net.osdl.org/index.php/Iproute2">iprouted2</a>. 
           If required, we can also consider GPL-compartible BSD-like license, and/or make it configurable.
      </p>
     </section>

    <section id="authors">
      <title>Authors</title>
      <p>
         The tool is written and supported by Robert Iakobashvili and Michael Moser both 
         from State of Israel. Please, use the link to the mailing list provided in Support 
         section to contact us and to get support for the tool.
      </p>
     </section>
     <section id="success-usage">
     <title>Successfully Used</title>
       <p>
           To simulate HTTP/S load of thousands of clients against authentication 
   gateway for testing of the gateway performance in various scenarios.

    curl-loader supplied HTTP/S client load against Apache web-server with the 
    gateway in the middle, where the gateway made a browser hijacking and HTTP- 
    redirection of the curl-clients to the HTTPS url at the gateway's own 
    web-server. HTTPS page of the web-server provided a POST form to the user
    with username and password for the client/user authentication against
    an external AAA (RADIUS) server. If the authentication was OK, user (a libcurl
    virtual client object) was allowed to enter the Internet and to perform some
    sort of simulated by curl-loader network activity, namely, fetching urls and 
    sleeping in between them. After enjoying Internet, user was coming to logoff.
      </p>
       <p> 
          To test web-server pages, authenticating tens and hundred thousand of
    clients, where each client comes to a HTTPS url using GET method and is
    redirected by the web-server to another url, providing authentication POST 
    form with username and password. After successful authentication of a client
    the web-server was setting to the client server-cookies. Client activities were 
    further simulated by fetching urls and sleeping in between. Clients were 
    doing logoff using GET-method to the web-server logoff-url, where the cookies
    were used by the web-server to verify client identity.
      </p>
       <p>
    To generate Gbps traffic from thousands of TCP/HTTP clients and to test the 
    impact of thousands of firewalling and NAT iptables/ipset rules and 
    hundreds of the rules being added/deleted each second at performance of a 
    gateway device.

    curl-loader provided client load against Apache web-server fetching a 
    url with a gigabyte file, thus, creating a permanent heavy-load 
    traffic, containing thousands of tcp-streams at the gateway in the middle.  
      </p>
    </section>
  </body>
</document>
